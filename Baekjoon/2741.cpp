#include <iostream>

int main() {
	int n;

	std::ios::sync_with_stdio(false);
	/*
	기본적으로 C++ 표준스트림은 C 표준 스트림과 동기화가 되어있기 때문에 이를 끊어주는 것이 좋다.
	즉, sync_with_stdio()에 false 로 인자를 넘겨 두 스트림의 동기화를 끊어주는 것이다.
	여기서 왜 cin.tie(NULL) 이나 cout.tie(NULL) 을 사용하지 않냐고 질문이 올 수 있다.
	하지만 잘 생각해보면, tie()는 '입력과 출력' 연결을 끊어주는 것이다.
	쉽게 말하자면 cin 입력이 들어오면 자동적으로 출력 버퍼를 비우게 된다는 것이다.
	즉, 입출력이 반복적으로 있을 때엔 위 연결을 끊어주는 것이 맞지만, 이 문제에서는 처음 입력이 들어오고 이 후 출력만 존재한다.
	입력과 출력이 번갈아가면서 사용하는 것이 아니기 때문에 서로 연결을 끊어주어도 의미가 없다. 즉 쓸 필요가 없다는 뜻이다.
	여러분들이 cin.tie(NULL); 이나 cout.tie(NULL)을 삽입하여 제출하더라도 위 코드와 성능 결과가 같게 나올 것이다.
	*/

	std::cin >> n;

	for (int i = 1; i <= n; i++) {
		std::cout << i << "\n";
		// std::endl 는 단순히 개행만 하는 것이 아닌 버퍼를 비우는 작업도 같이 하기 때문에 "\n"을 사용해주는 것이 알고리즘 풀이에서는 좋다.
	}
}